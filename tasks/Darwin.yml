---
- name: Check for existing Xcode installation
  stat:
    path: /Applications/Xcode.app
  register: xcode_app

- name: "Download XCode {{ xcode_version }}"
  shell: >
    jfrog rt dl 
    --flat
    --fail-no-op
    --retries=100
    "--url=https://artifactory.ccdc.cam.ac.uk/artifactory"
    "--user={{ ansible_deployment_artifactory_user }}"
    "--access-token={{ ansible_deployment_artifactory_key }}"
    "ccdc-3rdparty-macos-xcode-installers/Xcode_{{ xcode_version }}.xip"
    "~/Downloads/"
  environment:
    PATH: "/usr/local/bin:/usr/bin"
    CI: "true"
    JFROG_CLI_OFFER_CONFIG: "false"
  when: xcode_app.stat.isdir is not defined or not xcode_app.stat.isdir
  register: download

- name: Extract XCode archive
  command: xip -x "~/Downloads/Xcode_{{ xcode_version }}.xip"
  args:
    chdir: "/Applications"
    creates: "/Applications/Xcode.app"
  register: extract_xcode_xip

- name: Remove downloaded Xcode archive
  file:
    state: absent
    path: "~/Downloads/Xcode_{{ xcode_version }}.xip"
  
- name: Accept Xcode licence
  command: xcodebuild -license accept
  become: true

- name: Get list of installed packages
  command: pkgutil --pkgs
  register: pkgutil_packages

- name: Get list of packages available with Xcode
  find:
    path: /Applications/Xcode.app/Contents/Resources/Packages/
    patterns: '*.pkg'
    recurse: no
  register: packages

- name: Install Xcode packages
  include: install-pkg.yml
  vars:
    package_file: "{{ package }}"
    package_list: "{{ pkgutil_packages.stdout }}"
  with_items: "{{ packages.files | map(attribute='path') | list }}"
  loop_control:
    loop_var: package
