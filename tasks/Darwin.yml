---
- name: Ensure Homebrew packages are linked to system PATH
  community.general.homebrew:
    name: "{{ package }}"
    state: linked
  loop:
    - jfrog-cli
    - xcodes
  loop_control:
    loop_var: package

- name: Check for existing Xcode versions  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: xcodes installed {{ item.xcode_version }}
  ignore_errors: true
  register: xcode_check
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"
  loop: "{{ xcode_versions_to_install }}"

- name: Install Xcode  # noqa: no-changed-when
  when: item.rc != 0
  ansible.builtin.command:
    cmd: xcodes install {{ item.item.xcode_version }} --path {{ xcode-path }}/xcode-{{ item.item.xcode_version }}.xip --experimental-unxip
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"
  become: true
  loop: "{{ xcode_check.results }}"

- name: Set active Xcode to v{{ xcode_default_version }}  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: xcodes select {{ xcode_default_version }}
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"
  become: true

- name: Accept Xcode licence  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: xcodebuild -license accept
  become: true

- name: Get list of installed packages  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: pkgutil --pkgs
  check_mode: true
  register: pkgutil_packages

- name: Get list of packages available with Xcode
  ansible.builtin.find:
    path: /Applications/Xcode_{{ xcode_default_version }}.app/Contents/Resources/Packages/
    patterns: "*.pkg"
    recurse: no
  register: packages

- name: Install Xcode packages
  ansible.builtin.include_tasks: install-pkg.yml
  vars:
    package_file: "{{ package }}"
    package_list: "{{ pkgutil_packages.stdout }}"
  with_items: "{{ packages.files | map(attribute='path') | list }}"
  loop_control:
    loop_var: package
