---
- name: Set Xcode version for macOS {{ ansible_distribution_major_version }}
  ansible.builtin.set_fact:
    xcode_version: "{{ xcode_versions_by_macos[ansible_distribution_major_version] }}"

- name: Ensure Homebrew packages are linked to system PATH
  ansible.builtin.command:
    cmd: brew link {{ package }}
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"
  loop:
    - jfrog-cli
    - xcodes
  loop_control:
    loop_var: package
  register: link_package
  changed_when: '"symlinks created." in link_package.stdout'
  failed_when: link_package.rc != 0

- name: Check for existing Xcode v{{ xcode_version }}  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: xcodes installed {{ xcode_version }}
  ignore_errors: "{{ ansible_check_mode }}"
  register: xcode_check
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"

- name: Download Xcode v{{ xcode_version }}
  when: xcode_check.rc != 0
  ansible.builtin.command:
    cmd: >
      jf rt dl
        --flat
        --fail-no-op
        --retries=100
        --url="https://artifactory.ccdc.cam.ac.uk/artifactory"
        --user={{ ansible_deployment_artifactory_user }}
        --props="XCODE_VERSION={{ xcode_version }}"
        --password="{{ ansible_deployment_artifactory_key }}"
        "ccdc-3rdparty-macos-xcode-installers/"
        /tmp/xcode-{{ xcode_version }}.xip
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"
    CI: "true"
    JFROG_CLI_OFFER_CONFIG: "false"
  args:
    creates: /tmp/xcode-{{ xcode_version }}.xip

- name: Install Xcode v{{ xcode_version }}  # noqa: no-changed-when
  when: xcode_check.rc != 0
  ansible.builtin.command:
    cmd: xcodes install {{ xcode_version }} --path /tmp/xcode-{{ xcode_version }}.xip --experimental-unxip
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"

- name: Set active Xcode to v{{ xcode_version }}  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: xcodes select {{ xcode_version }}
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"

- name: Accept Xcode licence  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: xcodebuild -license accept
  check_mode: true

- name: Get list of installed packages  # noqa: no-changed-when
  ansible.builtin.command:
    cmd: pkgutil --pkgs
  check_mode: true
  register: pkgutil_packages

- name: Get list of packages available with Xcode
  ansible.builtin.find:
    path: /Applications/Xcode_{{ xcode_version }}.app/Contents/Resources/Packages/
    patterns: "*.pkg"
    recurse: no
  register: packages

- name: Install Xcode packages
  ansible.builtin.include_tasks: install-pkg.yml
  vars:
    package_file: "{{ package }}"
    package_list: "{{ pkgutil_packages.stdout }}"
  with_items: "{{ packages.files | map(attribute='path') | list }}"
  loop_control:
    loop_var: package
